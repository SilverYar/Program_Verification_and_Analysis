MODULE main
VAR

	pass0 : process passenger (0, passStates, doorState, doorOp, busState, terminal, payState, passStop, passQ, metk);
    pass1 : process passenger (1, passStates, doorState, doorOp, busState, terminal, payState, passStop, passQ, metk);
    pass2 : process passenger (2, passStates, doorState, doorOp, busState, terminal, payState, passStop, passQ, metk);
    pass3 : process passenger (3, passStates, doorState, doorOp, busState, terminal, payState, passStop, passQ, metk);
    pass4 : process passenger (4, passStates, doorState, doorOp, busState, terminal, payState, passStop, passQ, metk);

    passStates : array 0..4 of {wait, inn, payWait, payment, drive, outt, home};
    passStop : array 0..4 of {stop0, stop1};
    passQ : array 0..4 of {stop1, stop2};
    doorState : {allBusy, oneFree, twoFree, allFree};
    doorOp : {closed, opened};
    busState : {tr0, stop0, tr1, stop1, tr2, stop2, tr3};
    terminal : {allBusy, oneFree, allFree, allBusy2};
    payState : array 0..4 of {null, pay, not};
    metk : array 0..2 of {-1,0,1,2,3,4,5};
    
    

ASSIGN

    init(doorState) := allBusy;
    init(terminal) := allFree;
    init(busState) := tr0;
    init(doorOp) := closed;
    init(passStop[0]) := stop0;
    init(passStop[1]) := stop1;
    init(passStop[2]) := stop0;
    init(passStop[3]) := stop1;
    init(passStop[4]) := stop0;
    init(passQ[0]) := stop1;
    init(passQ[1]) := stop2;
    init(passQ[2]) := stop1;
    init(passQ[3]) := stop2;
    init(passQ[4]) := stop2;
    init(metk[0]) := 3;
    init(metk[1]) := 4;
    init(metk[2]) := 3;

-- Автобус проедет через все остановки
    CTLSPEC AG (busState = tr0 -> AF (busState = tr3))

-- Все кто зашел - оплатил проезд
    CTLSPEC AG ((payState[0] = null -> AF (payState[0] = pay)) & (payState[1] = null -> AF (payState[1] = pay)) & (payState[2] = null -> AF (payState[2] = pay)) & (payState[3] = null -> AF (payState[3] = pay)) & (payState[4] = null -> AF (payState[4] = pay)))

-- Все окажутся дома
    LTLSPEC G ((passStates[0] = wait -> F passStates[0] = home) & (passStates[1] = wait -> F passStates[1] = home) & (passStates[2] = wait -> F passStates[2] = home) & (passStates[3] = wait -> F passStates[3] = home) & (passStates[4] = wait -> F passStates[4] = home))

--Все, кто заплатил - уйдут
    LTLSPEC G ((payState[0] = pay -> F (passStates[0] = home)) & (payState[1] = pay -> F (passStates[1] = home)) & (payState[2] = pay -> F (passStates[2] = home)) & (payState[3] = pay -> F (passStates[3] = home)) & (payState[4] = pay -> F (passStates[4] = home)))



MODULE passenger(id, passStates, doorState, doorOp, busState, terminal, payState, passStop, passQ, metk)
VAR
    razr : {tr, tr1, fls};
    time : 0..10;
    time_metk : {tr, fls};
    
    

DEFINE
	state := passStates[id];
    paym := payState[id];
    stop := passStop[id];
    quit := passQ[id];
ASSIGN
	init (passStates[id]) := wait;
    init (payState[id]) := null;
    init (razr) := tr;
    init (time) := 0;
    init (time_metk) := tr;


next(passStop[id]) :=
    case
        TRUE : passStop[id];
    esac;

next(passQ[id]) :=
    case
        TRUE : quit;
    esac;

next(time) :=
    case
        state = payment & time_metk = tr & time !=10 : time + 1;
        TRUE : time;
    esac;

next(time_metk) :=
    case
        time_metk = tr & time = 10 : fls;
        TRUE : time_metk;
    esac;


next(doorState) :=
    case
        state = outt & doorState = allFree & doorOp = opened : twoFree;
        state = outt & doorState = twoFree & doorOp = opened : oneFree;
        state = outt & doorState = oneFree & doorOp = opened : allBusy;
        state = inn & doorState = allFree & doorOp = opened : twoFree;
        state = inn & doorState = twoFree & doorOp = opened : oneFree;
        state = inn & doorState = oneFree & doorOp = opened : allBusy;
        state = home & doorOp = opened & doorState = allBusy : oneFree;
        state = home & doorOp = opened & doorState = oneFree : twoFree;
        state = home & doorOp = opened & doorState = twoFree : allFree;
        state = drive & doorOp = opened & doorState = allBusy : oneFree;
        state = drive & doorOp = opened & doorState = oneFree : twoFree;
        state = drive & doorOp = opened & doorState = twoFree : allFree;
        TRUE : doorState;
    esac;

next(doorOp) :=
    case
        doorOp = closed & busState = stop0 : opened;
        doorOp = closed & busState = stop1 : opened;
        doorOp = closed & busState = stop2 : opened;
        doorOp = opened & doorState = allFree & busState = stop0 & metk[0] = 0 : closed;
        doorOp = opened & doorState = allFree & busState = stop1 & metk[1] = 0 : closed;
        doorOp = opened & doorState = allFree & busState = stop2 & metk[2] = 0 : closed;
        TRUE : doorOp;
    esac;

next(metk[0]) :=
    case
        busState = stop0 & stop = stop0 & state = drive & metk[0] = 5 & razr = tr : 4;
        busState = stop0 & stop = stop0 & state = drive & metk[0] = 4 & razr = tr : 3;
        busState = stop0 & stop = stop0 & state = drive & metk[0] = 3 & razr = tr : 2;
        busState = stop0 & stop = stop0 & state = drive & metk[0] = 2 & razr = tr : 1;
        busState = stop0 & stop = stop0 & state = drive & metk[0] = 1 & razr = tr : 0;
        TRUE : metk[0];
    esac;

next(razr) :=
    case
        state = drive : tr1;
        state = home : fls;
        TRUE : razr;
    esac;

next(metk[1]) :=
    case
        busState = stop1 & stop = stop1 & state = drive & metk[1] = 5 & razr = tr : 4;
        busState = stop1 & stop = stop1 & state = drive & metk[1] = 4 & razr = tr : 3;
        busState = stop1 & stop = stop1 & state = drive & metk[1] = 3 & razr = tr : 2;
        busState = stop1 & stop = stop1 & state = drive & metk[1] = 2 & razr = tr : 1;
        busState = stop1 & stop = stop1 & state = drive & metk[1] = 1 & razr = tr : 0;
        busState = stop1 & quit = stop1 & state = home & metk[1] = 5 & razr = tr1 : 4;
        busState = stop1 & quit = stop1 & state = home & metk[1] = 4 & razr = tr1 : 3;
        busState = stop1 & quit = stop1 & state = home & metk[1] = 3 & razr = tr1 : 2;
        busState = stop1 & quit = stop1 & state = home & metk[1] = 2 & razr = tr1 : 1;
        busState = stop1 & quit = stop1 & state = home & metk[1] = 1 & razr = tr1 : 0;
        TRUE : metk[1];
    esac;

next(metk[2]) :=
    case
        busState = stop2 & quit = stop2 & state = home & metk[2] = 5 & razr = tr1 : 4;
        busState = stop2 & quit = stop2 & state = home & metk[2] = 4 & razr = tr1 : 3;
        busState = stop2 & quit = stop2 & state = home & metk[2] = 3 & razr = tr1 : 2;
        busState = stop2 & quit = stop2 & state = home & metk[2] = 2 & razr = tr1 : 1;
        busState = stop2 & quit = stop2 & state = home & metk[2] = 1 & razr = tr1 : 0;
        TRUE : metk[2];
    esac;

next(busState) :=
    case
        busState = tr0 : stop0;
        busState = stop0 & metk[0] = 0 & doorOp = closed : tr1;
        busState = tr1 : stop1;
        busState = stop1 & metk[1] = 0 & doorOp = closed : tr2;
        busState = tr2 : stop2;
        busState = stop2 & metk[2] = 0 & doorOp = closed : tr3;
        TRUE : busState;
    esac;

next(terminal) :=
    case
        state = payWait & terminal = allFree : oneFree;
        state = payWait & terminal = oneFree : allBusy;
        --state = payWait & terminal = allBusy : allBusy2;
        --state = drive & terminal = allBusy2 : allBusy;
        state = drive & terminal = allBusy : oneFree;
        state = drive & terminal = oneFree : allFree;
        TRUE : terminal;
    esac;

next(payState[id]) :=
    case
        state = payment & paym = null : pay;
        state = payWait & paym = null & terminal = allBusy : not;
        TRUE : paym;
    esac;

next(passStates[id]) :=
    case
        state = wait & stop = stop0 & busState = stop0 & doorOp = opened : inn;
        state = wait & stop = stop1 & busState = stop1 & doorOp = opened & doorState != allBusy : inn;
        state = inn : payWait;
        state = payWait & payState[id] = not : drive;
        state = payWait & terminal != allBusy : payment;
        state = payment & time_metk = fls : drive;
        state = drive & quit = stop1 & busState = stop1 & doorOp = opened & doorState != allBusy : outt;
        state = drive & quit = stop2 & busState = stop2 & doorOp = opened & doorState != allBusy : outt;
        state = outt : home;
        --state = home : wait;
        TRUE : state;
    esac;


FAIRNESS
   running
